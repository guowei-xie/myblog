<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>浑身蟹数</title>
    <link>https://www.xiebro.cool/post/</link>
    <description>Recent content on 浑身蟹数</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.xiebro.cool/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DID结果的显著性</title>
      <link>https://www.xiebro.cool/post/2024-04-02-bootstrap-did/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/2024-04-02-bootstrap-did/</guid>
      <description>构造演示数据 library(tidyverse) # Generate dummy data ---- set.seed(42) # number of observations enroll = 5000 generate_vector &amp;lt;- function(N, prob1, prob2) { term &amp;lt;- c(rep(&amp;#34;term1&amp;#34;, N), rep(&amp;#34;term2&amp;#34;, N)) befr &amp;lt;- rbinom(N, size = 1, prob = prob1) aftr &amp;lt;- rbinom(N, size = 1, prob = prob2) # return data.frame(term = term, renewal = c(befr, aftr)) } grpA &amp;lt;- generate_vector(enroll, .10, .11) grpB &amp;lt;- generate_vector(enroll, .11, .13) # working data frame df &amp;lt;- bind_rows(grpA, grpB, .</description>
    </item>
    <item>
      <title>PSM倾向性得分匹配</title>
      <link>https://www.xiebro.cool/post/psm/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/psm/</guid>
      <description>背景目标 A为对照组，B为实验组; A和B的部分特征存在显著性差异，所以无法直接进行常规的AB-test随机化显著性检验; 使用PSM消除A与B的特征差异，处理成可以直接进行随机化显著性检验的样本 模拟数据集 set.seed(123) # generate group A n_a &amp;lt;- 1500 dat_A &amp;lt;- data.frame(age = rnorm(n_a, mean = 50, sd = 10), gender = sample(c(&amp;#34;Male&amp;#34;, &amp;#34;Female&amp;#34;), size = n_a, replace = TRUE), health = rnorm(n_a, mean = 0, sd = 1), income = rnorm(n_a, mean = 50000, sd = 10000), education = sample(c(&amp;#34;High School&amp;#34;, &amp;#34;Bachelor&amp;#39;s Degree&amp;#34;, &amp;#34;Master&amp;#39;s Degree&amp;#34;, &amp;#34;PhD&amp;#34;), size = n_a, replace = TRUE), treatment = rep(0, n_a) # A组均未参与实验 ) # generate group B n_b &amp;lt;- 500 dat_B &amp;lt;- data.</description>
    </item>
    <item>
      <title>IO-THE-WISP，一款自然语言取数工具</title>
      <link>https://www.xiebro.cool/post/io-the-wisp/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/io-the-wisp/</guid>
      <description>DEMO ➫ 🔗 io-the-wisp&#xA;Github ➫ 🔗 guowei-xie/io-the-wisp&#xA;项目简介 基于Rshiny+LLM开发的自然语言取数工具，通过调用Gemini的 API接口将自然语言转换为SQL指令，从数据库中提取数据并展示到前端。&#xA;使用流程 1. 配置config.yml 配置主路径下的config.yml文件，具体参照如下示例：&#xA;default: seed: 123 # no use # 数据库连接配置，项目默认使用Mysql数据库，将“xxxx”替换为你的实际连接配置 database: host: xxxxxx user: xxxxxx pwd: xxxxxx database: xxxxxx port: xxxxxx # 默认连接database中配置的数据库，进行建表和插入数据 # 用于记录用户查询结果，方便后续有针对性的优化prompt cache: dbname: xxxxxx tblname: &amp;#34;io_the_wisp_propmt&amp;#34; # 默认的表名，也可以自定义 # 模型参数配置 gemini: api_token: &amp;#34;xxxxx&amp;#34; # 替换为你的Gemini API token domain: &amp;#34;https://generativelanguage.googleapis.com/v1beta/models/&amp;#34; # Gemini接口 text_model: &amp;#34;gemini-pro:generateContent&amp;#34; # 选用文本生成模型 temperature: 0 topK: 1 topP: 1 maxOutputTokens: 2048 embedding_model: &amp;#34;embedding-001:embedContent&amp;#34; # 选用embedding模型 # prompt模板相关配置 template: folder: templates # prompt模板存放位置 embeddings: embeddings.</description>
    </item>
    <item>
      <title>异常值检测</title>
      <link>https://www.xiebro.cool/post/anomaly-detection/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/anomaly-detection/</guid>
      <description>library(tidyverse) library(hrbrthemes) theme_set(theme_ipsum(base_family = &amp;#34;Kai&amp;#34;, base_size = 8)) Dummy Data with Outliers set.seed(1234) N = 1e3 x = c(rnorm(N, 0, 0.5), rnorm(N * 0.05, -1, 1)) y = c(rnorm(N, 0, 0.5), rnorm(N * 0.05, 1, 1)) o = c(rep(0L, N), rep(1L, (N * 0.05))) mm &amp;lt;- matrix(x, y, nrow = N * 1.05, ncol = 2) dat &amp;lt;- tibble(x, y, outlier = o) dat |&amp;gt; ggplot(aes(x, y, col = factor(o))) + geom_vline(xintercept = 0) + geom_hline(yintercept = 0) + geom_point(alpha = 0.</description>
    </item>
    <item>
      <title>结构比率归因</title>
      <link>https://www.xiebro.cool/post/twofactor/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/twofactor/</guid>
      <description>在一些工作场景当中，比如渠道广告投放，假如这月与上月相比，总投放转化率出现了差异，那么，作为指导业务决策的数据分析师，我们需要讲清楚：两次投放转化率的差异，有多少是来自于渠道占比变化的结果，又有多少是来自渠道本身转化率波动的结果。&#xA;构造一份演示数据：&#xA;dat &amp;lt;- data.frame( dim = c(&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;E&amp;#34;), # 渠道名称 base_prop = c(0.2, 0.3, 0.1, 0.2, 0.2), # 上月(基期)各渠道用户数量占比 base_rate = c(0.1, 0.2, 0.15, 0.12, 0.05), # 上月(基期)各渠道用户转化率 curr_prop = c(0.25, 0.25, 0.15, 0.2, 0.15), # 本月(现期)各渠道用户数量占比 curr_rate = c(0.08, 0.15, 0.09, 0.1, 0.07) # 本月(现期)各渠道用户转化率 ) dat |&amp;gt; knitr::kable() dim base_prop base_rate curr_prop curr_rate A 0.2 0.10 0.25 0.08 B 0.3 0.20 0.25 0.15 C 0.</description>
    </item>
    <item>
      <title>漏斗指标归因</title>
      <link>https://www.xiebro.cool/post/lmdi/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/lmdi/</guid>
      <description>我们有一个结果指标新用户购买率Y，它由4个漏斗指标构成，分别为：新用户注册率A、注册用户激活率B、激活用户留存率C、留存用户购买率D。&#xA;即：Y = A x B x C x D&#xA;我们希望通过计算因子波动对结果指标Y的影响，来衡量这4个指标的重要性如何。&#xA;或是另外一个非常常见的工作场景，当Y发生了较大的波动，我们希望通过指标拆解，来清楚地说明各个因素的变动对整体的波动产生了什么样的影响。&#xA;# 创建一个包含基期和现期漏斗指标的示例数据框 set.seed(42) funnel_data &amp;lt;- data.frame(Indicator = c(&amp;#34;新用户注册率A&amp;#34;, &amp;#34;注册用户激活率B&amp;#34;, &amp;#34;激活用户留存率C&amp;#34;, &amp;#34;留存用户购买率D&amp;#34;), Base_Rate = runif(4, min = 0.1, max = 0.5), Current_Rate = runif(4, min = 0.1, max = 0.5) ) print(funnel_data) ## Indicator Base_Rate Current_Rate ## 1 新用户注册率A 0.4659224 0.3566982 ## 2 注册用户激活率B 0.4748302 0.3076384 ## 3 激活用户留存率C 0.2144558 0.3946353 ## 4 留存用户购买率D 0.4321791 0.1538666 LMDI（Logarithmic Mean Index Method）乘积因子拆解 library(dplyr) # 计算现期与基期结果指标Y的差异 Y0 &amp;lt;- prod(funnel_data$Base_Rate) Y1 &amp;lt;- prod(funnel_data$Current_Rate) Y_delta &amp;lt;- Y1 - Y0 # 计算平均对数权重 L &amp;lt;- Y_delta / (log(Y1) - log(Y0)) # 计算各指标在Y_delta中的贡献 C &amp;lt;- \(r0, r1) L * log(r1 / r0) # 计算各指标对整体变化率的贡献，即重要性 I &amp;lt;- \(C) C / Y_delta result &amp;lt;- funnel_data |&amp;gt; mutate(C = C(Base_Rate, Current_Rate), I = I(C)) result |&amp;gt; knitr::kable() Indicator Base_Rate Current_Rate C I 新用户注册率A 0.</description>
    </item>
    <item>
      <title>用AI帮助同事喝水减肥</title>
      <link>https://www.xiebro.cool/post/water-clock/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/water-clock/</guid>
      <description>我的同事们立志要“喝水减肥”，为了实现每天8杯水的目标，他们需要一个“定时提醒”。但只是提醒时间的话那未免有点太单调，如果接入大语言模型会不会让喝水这件事变得更加有趣，比如：&#xA;接下来，用R语言实现这个趣味定时器&amp;hellip;&#xA;配置文件 使用飞书自定义机器人来推送提醒消息，因此需要在群聊中创建机器人并获得webhook_url，具体参照&amp;raquo;飞书API文档&#xA;调用Gemini的文本生成模型，因此需要配置自己的api_key &amp;raquo;申请地址&#xA;设置触发提醒的时间，在这些时间点才会触发消息提醒&#xA;config.yml&#xA;default: # Gemini返回失败时的最大重复尝试次数 trials: 10 # 允许提醒的时间 crontab: - 10:00:00 - 11:00:00 - 14:00:00 - 15:00:00 - 16:00:00 - 17:00:00 - 18:00:00 - 19:00:00 - 20:00:00 webhook: # 替换成你自己的 - https://open.feishu.cn/open-apis/bot/v2/hook/xxxxx gemini: api: &amp;#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=&amp;#34; token: &amp;#34;xxxxxxxxxxxxx&amp;#34; # 替换成你自己的key prompt: &amp;#34;用幽默有趣的方式,简短表达这段话：现在的时间是{current_time}，该喝一杯水了&amp;#34; R脚本 clock.R&#xA;library(config) library(httr) library(tidyverse) gemini &amp;lt;- function(prompt){ url &amp;lt;- paste0(cnf$api, cnf$token) headers &amp;lt;- c(&amp;#39;Content-Type&amp;#39; = &amp;#39;application/json&amp;#39;) body &amp;lt;- list( contents = list( list( parts = list( list( text = prompt ) ) ) ) ) response &amp;lt;- POST(url, body = body, encode = &amp;#34;json&amp;#34;, verbose()) msg &amp;lt;- content(response)[[&amp;#34;candidates&amp;#34;]][[1]][[&amp;#34;content&amp;#34;]][[&amp;#34;parts&amp;#34;]][[1]][[&amp;#34;text&amp;#34;]] return(msg) } send_msg &amp;lt;- function(msg, webhook){ print(msg) body &amp;lt;- list( msg_type = &amp;#34;text&amp;#34;, content = list(text = msg) ) response &amp;lt;- httr::POST(url = webhook, body = list(msg_type = &amp;#34;text&amp;#34;, content = list(text = msg)), encode = &amp;#34;json&amp;#34;, add_headers(&amp;#34;Content-Type&amp;#34; = &amp;#34;application/json&amp;#34;)) if(response$status_code !</description>
    </item>
    <item>
      <title>“重男轻女”是否会导致男女比例失衡？</title>
      <link>https://www.xiebro.cool/post/only-want-boy/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/only-want-boy/</guid>
      <description>在一个严重受到“重男轻女”思想影响的村庄里，父母渴望拥有男孩，因此每当生下女孩时，他们就会不断地生育，直到有一天生下男孩为止。由于计划生育政策的限制，一旦有了男孩，就不能再生了。&#xA;那么，在这个村庄里的男女比例应该是怎样的？是否会偏向男性？&#xA;我们可以通过使用蒙特卡洛方法来模拟现实场景，计算出该村庄的男女比例。&#xA;simulate_once &amp;lt;- function(N, prob = 0.5, verbose = FALSE) { # nobody has anything yet... boys = 0; girls = 0; print_vars &amp;lt;- function() { message(&amp;#34;Boy-to-Girl Ratio: &amp;#34;, boys, &amp;#34; / &amp;#34;, girls) message(&amp;#34;====================================&amp;#34;) } tryonemore &amp;lt;- function(x, msgON) { if(msgON) message(x) # terminal condition: all 1 (boys) if (all(x)) { boys &amp;lt;&amp;lt;- boys + sum(x) if (msgON) print_vars() return(1) } # assign to parent env so that we can keep track boys &amp;lt;&amp;lt;- boys + sum(x) girls &amp;lt;&amp;lt;- girls + sum(!</description>
    </item>
    <item>
      <title>函数上的最大曲率点</title>
      <link>https://www.xiebro.cool/post/maximum-curvature/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/maximum-curvature/</guid>
      <description>在一些数据分析任务中，我们有时需要将数据拟合成曲线，并试图确定一个拐点来解释性质变化。那么，如何才能精确地找到这个拐点？&#xA;比如： 这里介绍R语言soilphysics包中的maxcurv()函数，来帮我们计算出函数曲线上的最大曲率点。&#xA;它的一般用法：&#xA;maxcurv(x.range, fun, method = c(&amp;#34;fd&amp;#34;, &amp;#34;pd&amp;#34;), graph = TRUE) # x.range: x 范围，一个包含两个元素的向量，表示曲线的取值范围。 # fun: 要计算曲率的函数，必须是一个可调用的 R 函数。 # method: 计算曲率的方法，可以是 &amp;#34;fd&amp;#34;（有限差分法）或 &amp;#34;pd&amp;#34;（抛物线拟合法）。 # graph: 是否显示计算过程的图形，默认为 TRUE。 返回值是一个列表，包含以下元素：&#xA;# x0: 最大曲率点的 x 坐标。 # y0: 最大曲率点的 y 坐标。 # curvature: 最大曲率点处的曲率值 原理：&#xA;对于给定的函数，首先在指定范围内生成足够密集的点。 根据指定的方法（有限差分法或抛物线拟合法），计算每个点处的曲率值。 找到曲率值最大的点，即为最大曲率点。 返回最大曲率点的坐标和曲率值。 示例1:&#xA;x_min = 1 x_max = 20 mc &amp;lt;- \(f) { soilphysics::maxcurv( x.range = c(x_min, x_max), fun = f, method = &amp;#34;pd&amp;#34;, graph = FALSE ) } # cubic cube &amp;lt;- \(x) 7424243 + (1.</description>
    </item>
    <item>
      <title>Kaplan-Meier生存分析</title>
      <link>https://www.xiebro.cool/post/survival-analysis/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/survival-analysis/</guid>
      <description>Kaplan-Meier生存分析：探索客户的生存概率随时间的变化，并可视化生存曲线，显示客户在不同时间点的生存概率。&#xA;数据集下载：Telco-Customer-Churn.csv&#xA;数据集概览 library(tidyverse) dat &amp;lt;- read.csv(&amp;#34;datasets/Telco-Customer-Churn.csv&amp;#34;) %&amp;gt;% mutate(churn = if_else(Churn == &amp;#34;Yes&amp;#34;, 1L, 0L)) dat %&amp;gt;% glimpse() ## Rows: 7,043 ## Columns: 22 ## $ customerID &amp;lt;chr&amp;gt; &amp;#34;7590-VHVEG&amp;#34;, &amp;#34;5575-GNVDE&amp;#34;, &amp;#34;3668-QPYBK&amp;#34;, &amp;#34;7795-CFOCW… ## $ gender &amp;lt;chr&amp;gt; &amp;#34;Female&amp;#34;, &amp;#34;Male&amp;#34;, &amp;#34;Male&amp;#34;, &amp;#34;Male&amp;#34;, &amp;#34;Female&amp;#34;, &amp;#34;Female&amp;#34;,… ## $ SeniorCitizen &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ Partner &amp;lt;chr&amp;gt; &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes… ## $ Dependents &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;… ## $ tenure &amp;lt;int&amp;gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2… ## $ PhoneService &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, … ## $ MultipleLines &amp;lt;chr&amp;gt; &amp;#34;No phone service&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No phone service&amp;#34;, &amp;#34;… ## $ InternetService &amp;lt;chr&amp;gt; &amp;#34;DSL&amp;#34;, &amp;#34;DSL&amp;#34;, &amp;#34;DSL&amp;#34;, &amp;#34;DSL&amp;#34;, &amp;#34;Fiber optic&amp;#34;, &amp;#34;Fiber opt… ## $ OnlineSecurity &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;… ## $ OnlineBackup &amp;lt;chr&amp;gt; &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;N… ## $ DeviceProtection &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Y… ## $ TechSupport &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes… ## $ StreamingTV &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Ye… ## $ StreamingMovies &amp;lt;chr&amp;gt; &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes… ## $ Contract &amp;lt;chr&amp;gt; &amp;#34;Month-to-month&amp;#34;, &amp;#34;One year&amp;#34;, &amp;#34;Month-to-month&amp;#34;, &amp;#34;One … ## $ PaperlessBilling &amp;lt;chr&amp;gt; &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;Yes&amp;#34;, &amp;#34;No&amp;#34;, … ## $ PaymentMethod &amp;lt;chr&amp;gt; &amp;#34;Electronic check&amp;#34;, &amp;#34;Mailed check&amp;#34;, &amp;#34;Mailed check&amp;#34;, &amp;#34;… ## $ MonthlyCharges &amp;lt;dbl&amp;gt; 29.</description>
    </item>
    <item>
      <title>为了一口醋，包了一顿饺子</title>
      <link>https://www.xiebro.cool/post/2024-02-25-r-blogdown/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/2024-02-25-r-blogdown/</guid>
      <description>搭建这个Blog的起因是这样的&amp;hellip;&#xA;有次无意中刷到下面这个阿里云的活动，99元1年的云服务器，这个羊毛怎能有不薅的道理！？2核2G虽然干不了重活，但搭个blog绰绰有余，所以，为了这口醋，咱们今天就来包顿饺子(从服务器购买到网站上线)。 一、服务器准备 购买服务器 登录阿里云去购买云服务器，可以选择“99元活动产品”也可以根据自己的要求配置。 注意系统镜像选择Ubuntu，因为本教程是基于Ubuntu系统 安全组配置 在“选配”时或购买成功后进入“云服务器ECS”控制台-点击“实例名称”-“安全组”-“管理规则”-“快速添加” 添加安全组规则，开放必要的端口 账号权限配置 打开本地终端，ssh连接登录root账号 ssh root@xxx.xxx.xxx.xxx # xxx替换为你的服务器ip 创建一个用户(比如我的用户名：guowei) adduser guowei 设置用户密码 passwd guowei 分配管理员权限 # 进入权限配置文件 visudo 将用户添加到root下，配置与root相同权限并保存 退出root连接，之后可以使用新创建的用户登录&#xA;二、制作网站 在Rstudio中，使用blogdown包来快速建站，具体可以阅读blogdown说明文档，这里我们直接使用，不对包方法做详细解释，另外的前提假定是你已经有了一定的R语言编程基础。&#xA;安装blogdown install.packages(&amp;#39;blogdown&amp;#39;) 创建blogdown项目 上图中的Hugo theme是网站的主题模板，这里配置的是默认模板，你也可以到https://themes.gohugo.io 上选择自己喜欢的模板，比如本站点使用的是Paper这个主题，你可以进入主题点击“Download”进入项目。 而github的项目名称就是主题模板名称，你可以很方便的将模板名称替换到Hugo theme的配置里，比如： 预览网站&#xA;blogdown包提供了很多非常便利的功能，比如：&#xA;# 预览网站，并且可以实时预览网站修改效果 blogdown::serve_site() 修改网站 /content/post/路径下的文件就是文章内容了，如果要添加新文章可以使用Rstudio插件快捷创建 插件中也提供了很多其他的快捷功能，比如“插入图片”。 config.yaml是网站的配置文件，比如网站标题、社交账号等，可以根据自己需要做修改 themes/路径下的内容是模板设计相关的代码，如果想要修改，建议有一些前端开发的经验 生成网站 修改完毕后，现在我们可以生成静态网站了，blogdown包同样提供了非常方便的方法：&#xA;blogdown::build_site() 如果看到类似上图的输出，说明站点已经生成，此时你的项目中会出现一个public目录，该目录下的内容就是你的静态站点了。&#xA;所以，我们每次修改或添加完内容，都需要重新build_site()，&#xA;接下来，我们只需要将public部署到服务器端即可。&#xA;三、网站部署 服务器登录 ssh username@xxx.xxx.xxx.xxx 上传站点 把public目录上传到服务器的/data/wwwroot/目录下 scp -r yourpath/public/ yourname@xxx.xxx.xxx.xxx:/data/wwwroot # 如果服务器没有该目录，需要先创建 # 切到根目录后 sudo mkdir data/wwwroot 这一步也可以使用git把项目clone到服务器目录，之后修改内容会更加方便一些 Nginx sudo权限下安装nginx sudo apt install nginx 启动nginx服务 sudo systemctl start nginx 验证安装：打开Web浏览器，并访问服务器的IP地址，如果看到Nginx的欢迎页面，那么Nginx已经成功安装并运行。</description>
    </item>
    <item>
      <title>猜猜篮子里有多少苹果</title>
      <link>https://www.xiebro.cool/post/apple-basket/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/apple-basket/</guid>
      <description>问题场景 在一个桶里，有同等数量的红苹果与青苹果，但你并不知道具体数量。 你随机抽取了 19 个，发现拿了红苹果 8 个，青苹果 11 个。 针对刚才桶里苹果的总数量（红与青之和），最好的猜测是多少？ 注：为了卫生起见，拿出任何一个苹果后就不准再放回桶里。 这是一个参数估计的概率问题，具体来说是通过已知的样本信息来估计总体参数的值。&#xA;在这个情景中，我们知道从一个桶中抽取了19个苹果，其中8个是红色的，11个是青色的。我们并不知道桶中到底有多少个苹果，但我们想要估计红色和青色苹果的总数量。&#xA;因此，我们需要考虑在不同假设下（桶中红色苹果的数量），得到观察样本的概率。然后，我们找到使得这一概率最大化的假设，即我们的最佳估计。&#xA;换句话说就是：当篮子里有多少个苹果时，你有最大的概率会抽到8红11青。&#xA;所以我们可以通过蒙特卡洛模拟计算：&#xA;当篮子里有11个红(或青)苹果时（即总共22个），抽到8红11青的概率是p11 当篮子里有12个红(或青)苹果时（即总共24个），抽到8红11青的概率是p12 &amp;hellip;&amp;hellip; 当篮子里有n个红(或青)苹果时（即总共2n个），抽到8红11青的概率是pn Monte-Carlo Simulation library(purrr) # 场景复刻 nn_size = 19 nn_red = 8 nn_green = 11 # 生成一个装有2n个苹果的篮子(0:红, 1:青) generate_bin &amp;lt;- function(n) { rep.int(c(0L, 1L), n) } # 实验设计 run_experiment &amp;lt;- function(n, trials = 10e3) { if (n &amp;lt; max(nn_red, nn_green)) return(0L) reps &amp;lt;- replicate( trials, n |&amp;gt; # 生成篮子 generate_bin() |&amp;gt; # 随机不放回抽样 sample(size = nn_size, replace = FALSE) |&amp;gt; # 判断结果是否符合预期 sum() == nn_green ) # 预期结果出现的概率=预期结果出现的次数/总抽样次数 sum(reps) / trials } # 实验进行 set.</description>
    </item>
    <item>
      <title>一些常用易忘的命令行</title>
      <link>https://www.xiebro.cool/post/2024-02-24-shell-commands/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/2024-02-24-shell-commands/</guid>
      <description>Linux # 查询磁盘使用情况 du -d1 -h # 查询CPU使用情况 top -d # 查询网络情况 networkQuality # 文件复制 cp file.txt newfile.txt cp file.txt /path/ # 文件内容复制 cat file.txt | pbcopy # 复制到剪贴板 pbpaste &amp;gt; newfile.txt # 粘贴到新文件 # 文件压缩 tar -zcvf abc.tar.gz directory #将目录压缩为gzip格式 # 文件解压 tar -zxvf abc.tar.gz # 对比两份文件 diff file1 file2 # 上传文件到云端 scp /path/to/local/file username@server:/path/to/remote/directory # 下载文件到本地 scp username@server:/path/to/remote/file /path/to/local/directory # 查询自身 IP curl -v https://api.ipify.org # 服务重启 systemctl restart nginx # stop/start ； mysql Git # .</description>
    </item>
  </channel>
</rss>
