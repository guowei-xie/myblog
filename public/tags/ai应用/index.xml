<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI应用 on 数据之道</title>
    <link>https://www.xiebro.cool/tags/ai%E5%BA%94%E7%94%A8/</link>
    <description>Recent content in AI应用 on 数据之道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.xiebro.cool/tags/ai%E5%BA%94%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI应用：喝水定时器，帮助同事每天喝下8杯水</title>
      <link>https://www.xiebro.cool/post/water-clock/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://www.xiebro.cool/post/water-clock/</guid>
      <description>为了帮助那些立志要减肥的同事每天按时喝下八杯水，我做了一个喝水定时器。但如果只是简单的提醒未免有些单调乏味，所以我尝试用大语言模型来生成有趣味的提醒内容，让喝水这件事变得更加有意思，比如像这样： 接下来，用R语言实现这个趣味定时器&amp;hellip;&#xA;配置文件 因为我们公司用飞书办公，所以这里使用的是飞书自定义机器人，因此我们需要在群聊中创建机器人并拿到webhook_url，具体可参照&amp;raquo;飞书API文档&#xA;这里调用的是Gemini的API（因为免费）,因此需要配置你自己的api_key，如果没有可以去这里申请&amp;raquo;申请地址&#xA;设置触发提醒的时间，在这些时间整点会触发喝水提醒&#xA;config.yml&#xA;default: # Gemini返回失败时的最大重复尝试次数 trials: 10 # 允许提醒的时间 crontab: - 10:00:00 - 11:00:00 - 14:00:00 - 15:00:00 - 16:00:00 - 17:00:00 - 18:00:00 - 19:00:00 - 20:00:00 webhook: # 替换成你自己的 - https://open.feishu.cn/open-apis/bot/v2/hook/xxxxx gemini: api: &amp;#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=&amp;#34; token: &amp;#34;xxxxxxxxxxxxx&amp;#34; # 替换成你自己的 prompt: &amp;#34;用幽默有趣的方式,简短表达这段话：现在的时间是{current_time}，该喝一杯水了&amp;#34; R脚本 clock.R&#xA;library(config) library(httr) library(tidyverse) gemini &amp;lt;- function(prompt){ url &amp;lt;- paste0(cnf$api, cnf$token) headers &amp;lt;- c(&amp;#39;Content-Type&amp;#39; = &amp;#39;application/json&amp;#39;) body &amp;lt;- list( contents = list( list( parts = list( list( text = prompt ) ) ) ) ) response &amp;lt;- POST(url, body = body, encode = &amp;#34;json&amp;#34;, verbose()) msg &amp;lt;- content(response)[[&amp;#34;candidates&amp;#34;]][[1]][[&amp;#34;content&amp;#34;]][[&amp;#34;parts&amp;#34;]][[1]][[&amp;#34;text&amp;#34;]] return(msg) } send_msg &amp;lt;- function(msg, webhook){ print(msg) body &amp;lt;- list( msg_type = &amp;#34;text&amp;#34;, content = list(text = msg) ) response &amp;lt;- httr::POST(url = webhook, body = list(msg_type = &amp;#34;text&amp;#34;, content = list(text = msg)), encode = &amp;#34;json&amp;#34;, add_headers(&amp;#34;Content-Type&amp;#34; = &amp;#34;application/json&amp;#34;)) if(response$status_code !</description>
    </item>
  </channel>
</rss>
